/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/_AuthorToBook": {
    get: {
      parameters: {
        query: {
          A?: parameters["rowFilter._AuthorToBook.A"];
          B?: parameters["rowFilter._AuthorToBook.B"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_AuthorToBook"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _AuthorToBook */
          _AuthorToBook?: definitions["_AuthorToBook"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          A?: parameters["rowFilter._AuthorToBook.A"];
          B?: parameters["rowFilter._AuthorToBook.B"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          A?: parameters["rowFilter._AuthorToBook.A"];
          B?: parameters["rowFilter._AuthorToBook.B"];
        };
        body: {
          /** _AuthorToBook */
          _AuthorToBook?: definitions["_AuthorToBook"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/author": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.author.id"];
          first_name?: parameters["rowFilter.author.first_name"];
          last_name?: parameters["rowFilter.author.last_name"];
          created_at?: parameters["rowFilter.author.created_at"];
          updated_at?: parameters["rowFilter.author.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["author"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** author */
          author?: definitions["author"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.author.id"];
          first_name?: parameters["rowFilter.author.first_name"];
          last_name?: parameters["rowFilter.author.last_name"];
          created_at?: parameters["rowFilter.author.created_at"];
          updated_at?: parameters["rowFilter.author.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.author.id"];
          first_name?: parameters["rowFilter.author.first_name"];
          last_name?: parameters["rowFilter.author.last_name"];
          created_at?: parameters["rowFilter.author.created_at"];
          updated_at?: parameters["rowFilter.author.updated_at"];
        };
        body: {
          /** author */
          author?: definitions["author"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/book": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.book.id"];
          title?: parameters["rowFilter.book.title"];
          created_at?: parameters["rowFilter.book.created_at"];
          updated_at?: parameters["rowFilter.book.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["book"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** book */
          book?: definitions["book"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.book.id"];
          title?: parameters["rowFilter.book.title"];
          created_at?: parameters["rowFilter.book.created_at"];
          updated_at?: parameters["rowFilter.book.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.book.id"];
          title?: parameters["rowFilter.book.title"];
          created_at?: parameters["rowFilter.book.created_at"];
          updated_at?: parameters["rowFilter.book.updated_at"];
        };
        body: {
          /** book */
          book?: definitions["book"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  _AuthorToBook: {
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `author.id`.<fk table='author' column='id'/>
     */
    A: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `book.id`.<fk table='book' column='id'/>
     */
    B: number;
  };
  author: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    first_name: string;
    /** Format: text */
    last_name: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    updated_at: string;
  };
  book: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    title: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    created_at: string;
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    updated_at: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description _AuthorToBook */
  "body._AuthorToBook": definitions["_AuthorToBook"];
  /** Format: integer */
  "rowFilter._AuthorToBook.A": string;
  /** Format: integer */
  "rowFilter._AuthorToBook.B": string;
  /** @description author */
  "body.author": definitions["author"];
  /** Format: integer */
  "rowFilter.author.id": string;
  /** Format: text */
  "rowFilter.author.first_name": string;
  /** Format: text */
  "rowFilter.author.last_name": string;
  /** Format: timestamp without time zone */
  "rowFilter.author.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.author.updated_at": string;
  /** @description book */
  "body.book": definitions["book"];
  /** Format: integer */
  "rowFilter.book.id": string;
  /** Format: text */
  "rowFilter.book.title": string;
  /** Format: timestamp without time zone */
  "rowFilter.book.created_at": string;
  /** Format: timestamp without time zone */
  "rowFilter.book.updated_at": string;
}

export interface operations {}

export interface external {}
